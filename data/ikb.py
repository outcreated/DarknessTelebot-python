from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup
from aiogram.types import WebAppInfo
from data.telebot_manager import KeyboardBuilder
from database.database_core import Product, SubscriptionPattern, User

def check_preregister_subscribed() -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()
    builder.btn(text="‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_preregister_subscribed")
    return builder.build(sizes=(1,))

def main_menu_keyboard(user: User) -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()
    # üé≠üéÅüì©üí†‚öôÔ∏èüîíüî∞
    builder.btn(text="üé≠ –†–µ—Ñ. –°–∏—Å—Ç–µ–º–∞", callback_data="user_refsystem_menu")
    builder.btn(text="üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="user_promocode_menu")
    builder.btn(text="üì© –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="1")
    builder.btn(text="üí† –¢–æ–≤–∞—Ä—ã", callback_data="user_product_menu")
    builder.btn(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="user_settings_menu")
    if user.isAdmin:
        builder.btn(text="üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="1")
    builder.btn(text="üî∞ –ü–æ–º–æ—â—å", callback_data="1")
    if user.isAdmin:
        return builder.build(sizes=(2, 2, 1, 1, 1))
    else:
        return builder.build(sizes=(2, 2, 1, 1))
    
def referal_menu_keyboard() -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()
    builder.btn(text="üí∏ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏", callback_data="user_ref_withdraw_money")
    builder.btn(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")

    return builder.build(sizes=(1, 1))

def promocode_menu_keyboard() -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()
    builder.btn(text="‚ù§Ô∏è‚Äçüî• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="user_activate_promocode")
    builder.btn(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")

    return builder.build(sizes=(1, 1))

def activated_promocode_menu_keyboard() -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()
    builder.btn(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")

    return builder.build(sizes=(1,))

def product_menu_keyboard(products: tuple[Product]) -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()

    for product in products:
        builder.btn(text=product.name, callback_data=f"user_product_menu@{product.id}")

    builder.keyboard.adjust(3, True)

    builder.btn(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")

    return builder.build()

def current_product_menu_keyboard(subscriptions: tuple[SubscriptionPattern]) -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()

    for subscription in subscriptions:
        builder.btn(text=f"üí∏ {subscription.cost} $ | {int(subscription.duration/86400)} –¥–Ω.", 
                    callback_data=f"user_buy_subscription@{subscription.id}")
        
    builder.keyboard.adjust(3, True)

    builder.btn(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_product_menu")

    return builder.build()

def crypto_bot_pay_keyboard(url: str) -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()
    builder.btn(text="üí∏ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="-", url=url)
    builder.btn(text="üö´ –û—Ç–º–µ–Ω–∞", callback_data="user_cancel_buy_subscription")
    builder.btn(text="‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", callback_data="update_invoice_status")
    

    return builder.build(sizes=(2, 1))

def settings_menu_keyboard() -> InlineKeyboardMarkup:
    builder = KeyboardBuilder()
    builder.btn(text=f"‚úÖ –ù–æ–≤—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="setting_new_ref")
    builder.btn(text=f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞", callback_data="setting_ref_buy")
    builder.btn(text=f"‚úÖ –û–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", callback_data="setting_admin_alerts")
    builder.btn(text=f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö", callback_data="setting_subscriptions")
    builder.btn(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.btn(text="üö´ –í—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data="setting_off_all")

    return builder.build(sizes=(1, 1, 1, 1, 2))
