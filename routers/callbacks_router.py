import config

from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from routers.commands_router import check_user_channel_subscribed, preRegisterUsers, generate_user_text_profile
from database import requests_user, requests_promocode, requests_product
from database.database_core import User, Promocode
from data import ikb

callback_router = Router()

@callback_router.callback_query(F.data == "check_preregister_subscribed")
async def register_of_button(c: CallbackQuery):
    if await check_user_channel_subscribed(c.from_user.id, c.bot):
        await c.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, –ø—Ä–æ–≤–æ–∂—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...", show_alert=False, cache_time=2)
        status = await requests_user.add_user(c.from_user.id, c.from_user.username, preRegisterUsers[c.from_user.id])
        preRegisterUsers.pop(c.from_user.id)
        if status:
            await c.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /menu")
        else:
            await c.message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–≤–∞–Ω—ã!")

        await c.bot.delete_message(c.from_user.id, c.message.message_id)
        
    else:
        await c.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=False, cache_time=2)

@callback_router.callback_query(F.data == "main_menu")
async def open_main_menu(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)
    await c.message.edit_text(text=await generate_user_text_profile(user), reply_markup=ikb.main_menu_keyboard(user))


@callback_router.callback_query(F.data == "user_refsystem_menu")
async def open_refsystem_menu(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)
    await c.message.edit_text(text=await generate_refsystem_menu_text(user), reply_markup=ikb.referal_menu_keyboard())


@callback_router.callback_query(F.data == "user_promocode_menu")
async def open_promocode_menu(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)
    await c.message.edit_text(text=await generate_promocode_menu_text(user), reply_markup=ikb.promocode_menu_keyboard())

async def generate_refsystem_menu_text(user: User) -> str:
    text = f"""
    ‚ñ∫ [ üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ∫ [ üß© ] –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ > <code>{len(user.get_referals())}</code>
        ‚ñ∫ [ üí∞ ] –ë–∞–ª–∞–Ω—Å > <code>{user.balance} $</code>
        ‚ñ∫ [ üíµ ] –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å > <code>{user.total_balance} $</code>
        ‚ñ∫ [ üéØ ] –í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç > <code>{user.ref_percentage}%</code>
        ‚ñ∫ [ üìé ] –°—Å—ã–ª–∫–∞ > <a href='{config.REF_LINK_PATTERN + str(user.telegram_id)}'>(–ü–ö–ú > –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</a>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ñ∫ [ üì© –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ∫ <strong>B –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥</strong>
    """

    return text

async def generate_promocode_menu_text(user: User) -> str:
    promocodes_id = user.get_promocodes()
    text = f"""‚ñ∫ [ üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ    
        –ü–æ—Å–ª–µ–¥–Ω–∏–µ <i>10</i> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:
    """
    if len(promocodes_id) < 1:
        text += f"""
        ‚ñ∫ <i><b>–ü—É—Å—Ç–æ</b></i>
        """
        return text
    
    for i in range(len(promocodes_id)):
        promocode = await requests_promocode.get_promocode_by_id(promocodes_id[i])
        product = await requests_product.get_product_by_id(promocode.product_id)
        text += f"\n    ‚ñ∫ <i>#{promocode.name}</i> - <b>{product.name}</b> –Ω–∞ <code>{promocode.product_duration/3600}</code><b> —á–∞—Å(–æ–≤)</b>"

    return text