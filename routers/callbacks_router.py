import threading
import time
import config
import cryptobot
import datetime
import asyncio

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, FSInputFile
from routers.commands_router import check_user_channel_subscribed, preRegisterUsers, generate_user_text_profile
from database import requests_user, requests_promocode, requests_product, requests_sub
from database.database_core import Product, User, Promocode
from data import ikb

callback_router = Router()

class CreatePromocode(StatesGroup):
    promo_name = State()
    promo_uses = State()
    product_id = State()
    promo_duration = State()

#================================================================
#=====================USER=======================================
#================================================================

@callback_router.callback_query(F.data == "check_preregister_subscribed")
async def register_of_button(c: CallbackQuery):
    if await check_user_channel_subscribed(c.from_user.id, c.bot):
        await c.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, –ø—Ä–æ–≤–æ–∂—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...", show_alert=False, cache_time=2)
        status = await requests_user.add_user(c.from_user.id, c.from_user.username, preRegisterUsers[c.from_user.id])
        preRegisterUsers.pop(c.from_user.id)
        if status:
            await c.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å! –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /menu")
        else:
            await c.message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–≤–∞–Ω—ã!")

        await c.bot.delete_message(c.from_user.id, c.message.message_id)
        
    else:
        await c.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª", show_alert=False, cache_time=2)

@callback_router.callback_query(F.data == "main_menu")
async def open_main_menu(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)
    await c.message.edit_text(text=await generate_user_text_profile(user), reply_markup=ikb.main_menu_keyboard(user))


@callback_router.callback_query(F.data == "user_refsystem_menu")
async def open_refsystem_menu(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)
    await c.message.edit_text(text=await generate_refsystem_menu_text(user), reply_markup=ikb.referal_menu_keyboard())


@callback_router.callback_query(F.data == "user_promocode_menu")
async def open_promocode_menu(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)
    await c.message.edit_text(text=await generate_promocode_menu_text(user), reply_markup=ikb.promocode_menu_keyboard())

@callback_router.callback_query(F.data == "user_product_menu")
async def open_product_menu(c: CallbackQuery):
    products = await requests_product.get_all_products()

    await c.message.edit_text(text=await generate_product_menu_text(), reply_markup=ikb.product_menu_keyboard(products))

@callback_router.callback_query(F.data == "user_settings_menu")
async def user_settings_menu(c: CallbackQuery):
    await c.message.edit_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏. –í—Å–µ", reply_markup=ikb.settings_menu_keyboard())

@callback_router.callback_query(F.data == "user_subscriptions_menu")
async def user_subscriptions_menu(c: CallbackQuery):
    await c.message.edit_text(
        text=await generate_subscriptions_menu_text(c.from_user.id), 
        reply_markup=await ikb.subscriptions_menu_keyboard(c.from_user.id))

@callback_router.callback_query(F.data.startswith("user_info_product@"))
async def user_info_product(c: CallbackQuery):
    product = await requests_product.get_product_by_id(int(c.data.split("@")[1]))
    await c.message.edit_text(text=await generate_product_info_menu_text(product),
                              reply_markup=await ikb.generate_product_info_menu_keyboard(product))

# ---------------------------------------------------
# ---------------------------------------------------

@callback_router.callback_query(F.data.startswith("user_product_menu@"))
async def open_product_menu_by_id(c: CallbackQuery):
    product = await requests_product.get_product_by_id(int(c.data.split("@")[1]))
    product_subs = await requests_sub.get_product_subscriptions_patterns(product.id)
    await c.message.edit_text(
        text=await generate_current_product_menu_text(product), 
        reply_markup=ikb.current_product_menu_keyboard(product_subs))
    
@callback_router.callback_query(F.data.startswith("user_buy_subscription@"))
async def user_buy_subscription(c: CallbackQuery):
    subscription_id = int(c.data.split("@")[1])
    subscription = await requests_sub.get_subscription_by_id(subscription_id)

    url = await cryptobot.create_invoice(subscription.cost, c.from_user.id, subscription.id)
    await c.message.edit_text(await generate_buy_subscription_text(),
                              reply_markup=ikb.crypto_bot_pay_keyboard(url))
    
@callback_router.callback_query(F.data == "update_invoice_status")
async def update_invoice_status(c: CallbackQuery):
    status = await cryptobot.update_invoice(c.from_user.id)

    if status[0] == "active":
        await c.answer("‚ùå –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω", cache_time=5)
    elif status[0] == "paid":
        await c.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await cryptobot.delete_invoice(c.from_user.id)
        user = await requests_user.get_user_by_telegram_id(c.from_user.id)
        subscription = await requests_sub.get_subscription_by_id(status[1])
        await requests_user.add_referrer_balance(user, subscription.cost)
        await requests_sub.add_subscription_to_user(status[1], c.from_user.id)
        await c.message.edit_text(text=await generate_user_text_profile(user), 
                                  reply_markup=ikb.main_menu_keyboard(user))
        
@callback_router.callback_query(F.data == "user_cancel_buy_subscription")
async def user_cancel_buy_subscription(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)
    await cryptobot.delete_invoice(c.from_user.id)
    await c.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", cache_time=5)
    await c.message.edit_text(text=await generate_user_text_profile(user), 
                              reply_markup=ikb.main_menu_keyboard(user))
    
@callback_router.callback_query(F.data.startswith("download_product@"))
async def download_product(c: CallbackQuery):
    product_id = int(c.data.split("@")[1])
    file_path = f'downloads/{product_id}.txt'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
    await c.message.answer_document(caption="–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", 
                                    document=FSInputFile(path=file_path))

    
# ---------------------------------------------------
# ---------------------------------------------------
    
@callback_router.callback_query(F.data == "user_ref_withdraw_money")
async def user_ref_withdraw_money(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)
    if user.balance <= 5.0:
        await c.answer("\t\t–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 5.0 $",
                       show_alert=True)
        return
    status = await requests_user.create_withdraw(c.from_user.id)

    if not status:
        await c.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥, –æ–∂–∏–¥–∞–π—Ç–µ",
                       show_alert=True)
    else:
        await c.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥!\n\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
                       show_alert=True)
    
        
async def generate_refsystem_menu_text(user: User) -> str:
    text = f"""
    ‚ñ∫ [ üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ∫ [ üß© ] –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ > <code>{len(user.get_referals())}</code>
        ‚ñ∫ [ üí∞ ] –ë–∞–ª–∞–Ω—Å > <code>{user.balance} $</code>
        ‚ñ∫ [ üíµ ] –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å > <code>{user.total_balance} $</code>
        ‚ñ∫ [ üéØ ] –í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç > <code>{user.ref_percentage}%</code>
        ‚ñ∫ [ üìé ] –°—Å—ã–ª–∫–∞ > <a href='{config.REF_LINK_PATTERN + str(user.telegram_id)}'>(–ü–ö–ú > –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</a>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚ñ∫ [ üì© –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ∫ <strong>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</strong>
    """

    return text

async def generate_promocode_menu_text(user: User) -> str:
    promocodes_id = user.get_promocodes()
    text = f"""‚ñ∫ [ üéÅ –ü—Ä–æ–º–æ–∫–æ–¥—ã ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ    
        –ü–æ—Å–ª–µ–¥–Ω–∏–µ <i>10</i> –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:
    """
    if len(promocodes_id) < 1:
        text += f"""
        ‚ñ∫ <i><b>–ü—É—Å—Ç–æ</b></i>
        """
        return text
    
    
    for i in range(len(promocodes_id)):
        promocode = await requests_promocode.get_promocode_by_id(promocodes_id[i])
        product = await requests_product.get_product_by_id(promocode.product_id)
        text += f"\n    ‚ñ∫ <i>#{promocode.name}</i> - <b>{product.name}</b> –Ω–∞ <code>{promocode.product_duration/3600}</code><b> —á–∞—Å(–æ–≤)</b>"

    return text

async def generate_product_menu_text() -> str:
    return """‚ñ∫ [ üí† –¢–æ–≤–∞—Ä—ã ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ    
        B –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    """

async def generate_current_product_menu_text(product: Product) -> str:
    text = f"""‚ñ∫ [ üîë –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–∞ ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ    
        –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <code>{product.name}</code>
        –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product.description}
        –í–µ—Ä—Å–∏—è: <code>{product.version}</code>
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ    
            """
    text += """
‚ñ∫ [ üì© –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ]
        ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
        ‚ñ∫ <strong>–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω —Å—á–µ—Ç –≤ <i>Crypto Bot</i></strong> 
        ‚ñ∫ <strong>–ß—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç</strong>               
    """

    return text

async def generate_buy_subscription_text() -> str:
    return "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ <i>CryptoBot</i>\n " \
           "–£ –≤–∞—Å –µ—Å—Ç—å 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—á–µ—Ç <strong>–ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å</strong> –∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –µ–≥–æ "\
           "–ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–µ–Ω—å–≥–∏ –∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∏—á–µ–≥–æ\n\n<strong>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º</strong> —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–π <i>Telegram ID</i> –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É"

async def generate_subscriptions_menu_text(telegram_id: int) -> str:
    text = "‚ñ∫ [ üîë –ü–æ–¥–ø–∏—Å–∫–∏ ]\n\t‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"

    subs = await requests_sub.get_user_subscriptions(telegram_id)
    count = 0
    for sub in subs:
        count += 1
        product = await requests_product.get_product_by_id(sub.product_id)
        text += f"""
‚ñ∫ [ üîë {product.name} ]
    ‚ñ∫ –°—Ç–∞—Ç—É—Å > –ê–∫—Ç–∏–≤–Ω–∞
    ‚ñ∫ –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ > <code>{await timestamp_to_sub_end_date(sub.start_date)}</code>
    ‚ñ∫ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è > <code>{await timestamp_to_sub_end_date(sub.end_date)}</code>
    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
                    """
        
    if count < 1:
        text += f"""
        ‚ñ∫ <i><b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ üòï</b></i>
        """
        return text

    return text

async def generate_product_info_menu_text(product: Product) -> str:
    text = f"‚ñ∫ [ üîë {product.name} ]\n\t‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n"

    text += product.description

    return text


async def timestamp_to_sub_end_date(timestamp: int) -> str:
    current_datetime = datetime.datetime.fromtimestamp(timestamp)
    return current_datetime.strftime('%d-%m-%Y | %H:%M:%S')

#================================================================
#=====================ADMIN======================================
#================================================================


 

@callback_router.callback_query(F.data.startswith("admin_"))
async def admin_callback(c: CallbackQuery):
    user = await requests_user.get_user_by_telegram_id(c.from_user.id)

    if not user.isAdmin:
        await c.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    callback_name = c.data.split("admin_")[1]

    match callback_name:
        case "apanel_menu":
            await apanel_menu(c)
        case "refsystem_menu":
            await admin_refsytem_menu(c)
        case "product_menu":
            await admin_product_menu(c)
        case "promocode_menu":
            await admin_promocode_menu(c)
        case _ if callback_name.startswith("edit_product_menu@"):
            product_id = int(callback_name.split("@")[1])
            await admin_edit_product_menu(c, product_id)
        case _ if callback_name.startswith("admin_edit_product:"):
            edit_type = str(callback_name.split(":")[1]).split("@")[0]
            product_id = str(callback_name.split(":")[1]).split("@")[1]

            await admin_edit_product(c, edit_type, product_id)
        case _:
            await c.answer(text="‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä", show_alert=True)

async def apanel_menu(c: CallbackQuery) -> None:
    await c.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", 
                              reply_markup=ikb.apanel_menu_keyboard())

async def admin_refsytem_menu(c: CallbackQuery) -> None:
    await c.message.edit_text(text=await generate_admin_refsystem_menu_text(), 
                              reply_markup=ikb.admin_refsystem_menu_keyboard())
    
async def admin_product_menu(c: CallbackQuery) -> None:
    products = await requests_product.get_all_products()
    await c.message.edit_text(text="–ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                              reply_markup=ikb.admin_product_menu_keyboard(products))

async def admin_edit_product_menu(c: CallbackQuery, product_id: int) -> None:
    product = await requests_product.get_product_by_id(product_id)

    await c.message.edit_text(text=await generate_admin_edit_product_menu_text(product), 
                              reply_markup=ikb.admin_edit_product_menu_keyboard(product))
    
async def admin_edit_product(c: CallbackQuery, edit_type: str, product_id: str) -> None:
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ, —á—Ç–æ —Ç–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–µ–≥–æ
    match edit_type:
        case "name":
            pass
        case "description":
            pass
        case "manual":
            pass
        case "version":
            pass
        case "subs":
            pass
        case "state":
            pass
        case _:
            await c.answer(text="‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä", show_alert=True)

async def admin_promocode_menu(c: CallbackQuery) -> None:
    await c.message.edit_text(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", reply_markup=ikb.admin_promocode_menu_keyboard())


@callback_router.callback_query(F.data.startswith("create_promocode_apanel?"))
async def create_promocode_apanel(c: CallbackQuery):
    creation_code = c.data.split("?")[1]

    product_id = creation_code.split("&")[0]
    promo_name = creation_code.split("&")[1]
    promo_uses = creation_code.split("&")[2]
    promo_duration = creation_code.split("&")[3]
    promo_end = creation_code.split("&")[4]

    try:
        result = await requests_promocode.add_promocode(promo_name, promo_uses, promo_end, product_id, promo_duration)

        if not result:
            await c.message.edit_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ —Å–æ–∑–¥–∞–Ω",
                reply_markup=ikb.back_to_main_menu_keyboard())
        else:
            await c.message.edit_text(text=f"–ü—Ä–æ–º–æ–∫–æ–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º #{promo_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–π: <strong>{promo_uses}</strong>",
                reply_markup=ikb.back_to_main_menu_keyboard())
    except Exception as e:
        await c.message.edit_text(text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: \n\n\n{e}", reply_markup=ikb.back_to_main_menu_keyboard())

#================================================================
    
async def generate_admin_edit_product_menu_text(product: Product) -> str:
    text = f"‚ñ∫ [ üîë {product.name} ]\n\t"
    return text
    
async def generate_admin_refsystem_menu_text() -> str:
    text = "–†–µ—Ñ. —Å–∏—Å—Ç–µ–º–∞\n\n\t–¢–µ–∫—É—â–∏–π –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: <code>10%</code>"
    return text

#================================================================