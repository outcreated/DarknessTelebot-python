from aiogram import Router, types, F
from aiogram.filters import Command, Filter
from tools import check_user_register
from database.requests import get_user_by_telegram_id, get_product_by_id
from keyboards.inline import generate_user_menu, generate_user_product_menu, generate_user_check_product_menu, get_buy_product_kb
from database import requests
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import market

user_router = Router()


class RegisterProtect(Filter):
    async def __call__(self, message: types.Message):
        if await check_user_register(message.from_user.id):
            return True
        else:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
                                 "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –ø—Ä–æ–π–¥–∏—Ç–µ "
                                 "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
            return False


class UserUsePromocode(StatesGroup):
    promo_name = State()


@user_router.callback_query(F.data == "open_product_menu")
async def open_user_product_menu(call: types.CallbackQuery):
    await call.message.edit_caption(
        caption="–¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å"
        " —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—Ç –Ω–∞—Å –∏–ª–∏ "
        "–ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∏—Ö",
        reply_markup=await generate_user_product_menu())


@user_router.callback_query(F.data.startswith("user_check_product_"))
async def user_check_product(call: types.CallbackQuery):
    product_id = call.data.split("_check_product_")[1]

    product = await requests.get_product_by_id(int(product_id))
    await call.message.edit_caption(caption=f"{product.product_name}",
                                    reply_markup=await generate_user_check_product_menu(product_id, call.from_user.id))


@user_router.callback_query(F.data.startswith("user_update_invoice_status:"))
async def update_invoice_status(call: types.CallbackQuery):
    status = await market.update_invoice(call.from_user.id)
    product_id = call.data.split(":")[1]
    product_duration = call.data.split("-")[1]

    if status == "active":
        await call.answer("‚ùå –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω")
    elif status == "paid":
        await call.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
        await requests.give_user_product(call.from_user.id, product_id, product_duration)
        await requests.add_referer_balance(call.from_user.id)
        await call.message.delete()


@user_router.callback_query(F.data.startswith("user_create_invoice_product_"))
async def user_buy_product(call: types.CallbackQuery):
    print(call.data)
    rawdata = call.data.split("_product_")[1]
    product_id = rawdata.split(":")[0]
    duration = rawdata.split(":")[1]

    await call.message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç –≤ CryptoBot\n\n–£ –≤–∞—Å –µ—Å—Ç—å "
                              "5 –º–∏–Ω—É—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—á–µ—Ç –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –µ–≥–æ "
                              "–ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–µ–Ω—å–≥–∏ –∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∏—á–µ–≥–æ\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ–π telegram id –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–ª–∞—Ç–µ–∂—É", reply_markup=await get_buy_product_kb(product_id, duration, call.from_user.id))


@user_router.callback_query(F.data == "open_promo_menu")
async def open_user_promo_menu(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
    await state.set_state(UserUsePromocode.promo_name)


@user_router.callback_query(F.data.startswith("download_"))
async def user_download_file(call: types.CallbackQuery):
    file_path = call.data.split("_")[1]
    file_path = f'files/{file_path}.rar'  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
    await call.message.answer_document(document=types.FSInputFile(path=file_path))


@user_router.message(UserUsePromocode.promo_name)
async def user_used_promo(message: types.Message, state: FSMContext):
    res = await requests.update_promocode(message.text, message.from_user.id)

    if res == "promo_used":
        await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")
    elif res == "promo_not_exist":
        await message.answer("–î–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫")
    else:

        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ <strong>{message.text}</strong> —É—Å–ø–µ—à–Ω–æ"
                             f" –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n–í–∞–º –≤—ã–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {res}")
    await state.clear()


@user_router.callback_query(F.data == "open_user_profile")
async def open_user_profile(call: types.CallbackQuery):
    await call.message.edit_caption(caption=await get_user_profile(
        call.from_user.id),
        reply_markup=await generate_user_menu())


@user_router.message(Command("menu"), RegisterProtect())
async def message(message: types.Message):
    file_path = "images/user_profile.jpg"
    await message.answer_photo(photo=types.FSInputFile(path=file_path),
                               caption=await get_user_profile(
                                   message.from_user.id),
                               reply_markup=await generate_user_menu())


@user_router.message(Command("promo"), RegisterProtect())
async def use_promo(message: types.Message):
    promo_name = message.text.split(" ")[1]
    response = await requests.update_promocode(promo_name, message.from_user.id)

    if response == "promo_used":
        await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")
    elif response == "promo_not_exist":
        await message.answer("–î–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫")
    else:
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ <strong>{promo_name}</strong> —É—Å–ø–µ—à–Ω–æ"
                             f" –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n–í–∞–º –≤—ã–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {response}")


async def get_user_profile(telegram_id: int) -> str:
    user = await get_user_by_telegram_id(telegram_id)
    profile = f"""
    > [ ü™™ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å ]
    ‚ñ∫ üî∞ ID: <code>{user.telegram_id}</code>
    ‚ñ∫ üìÜ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: <code>{user.register_date.split()[0]}</code>
    ‚ñ∫ üß© –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user.referals.split(" ")) - 1}
    ‚ñ∫ üí∞ –†–µ—Ñ. –±–∞–ª–∞–Ω—Å: {user.referal_balance} $
    ‚ñ∫ üìé –†–µ—Ñ. –°—Å—ã–ª–∫–∞ <code>https://t.me/darknessparser_bot?start=ref-{telegram_id}</code>
    """
    if len(user.current_products) == 0:
        no_product = "\nüôÅ –£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
        profile = profile + no_product
    else:
        user = await requests.get_user_by_telegram_id(telegram_id=telegram_id)
        products = user.current_products
        product_id = products.split(":")[0]
        product = await requests.get_product_by_id(int(product_id))
        product_left = products.split(":")[1]

        product_text = f"""\n>  [ üîê {product.product_name} ]
            ‚ñ∫ üîë –ü–æ–¥–ø–∏—Å–∫–∞  [ –ê–∫—Ç–∏–≤–Ω–∞ ]
            ‚ñ∫ ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: [ {product_left} —á ]
            """
        profile = profile + product_text

    '''
    >  [ üîê –ü–æ–¥–ø–∏—Å–∫–∞ ]
        ‚ñ∫ üîë –°—Ç–∞—Ç—É—Å  [ –ê–∫—Ç–∏–≤–Ω–∞ ]
        ‚ñ∫ ‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: [ 240 —á ]
    '''
    return profile
